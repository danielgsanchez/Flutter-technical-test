import '../../domain/entities/fixture.dart';

// Define a class representing the FixtureModel
class FixtureModel extends FixtureEntity {
  // Constructor of the superclass (FixtureEntity)
  const FixtureModel({
    super.id,
    super.referee,
    super.timezone,
    super.date,
    super.timestamp,
    super.venueId,
    super.venueName,
    super.venueCity,
    super.statusLong,
    super.statusShort,
    super.statusElapsed,
    super.leagueId,
    super.leagueName,
    super.leagueCountry,
    super.leagueLogo,
    super.leagueFlag,
    super.leagueSeason,
    super.leagueRound,
    super.homeTeamId,
    super.homeTeamName,
    super.homeTeamLogo,
    super.homeTeamWinner,
    super.awayTeamId,
    super.awayTeamName,
    super.awayTeamLogo,
    super.awayTeamWinner,
    super.goalsHome,
    super.goalsAway,
    super.scoreHalftimeHome,
    super.scoreHalftimeAway,
    super.scoreFulltimeHome,
    super.scoreFulltimeAway,
    super.scoreExtratimeHome,
    super.scoreExtratimeAway,
    super.scorePenaltyHome,
    super.scorePenaltyAway,
  });

  // Factory method to create a StandingModel instance from a JSON map (transforms the JSON map from the API into a StandingModel object)
  factory FixtureModel.fromJson(Map<String, dynamic> map) {
    return FixtureModel(
      id: map['fixture']['id'],
      referee: map['fixture']['referee'] ?? '',
      timezone: map['fixture']['timezone'] ?? '',
      date: map['fixture']['date'] ?? '',
      timestamp: map['fixture']['timestamp'] ?? 0,
      venueId: map['fixture']['venue']['id'] ?? 0,
      venueName: map['fixture']['venue']['name'] ?? '',
      venueCity: map['fixture']['venue']['city'] ?? '',
      statusLong: map['fixture']['status']['long'] ?? '',
      statusShort: map['fixture']['status']['short'] ?? '',
      statusElapsed: map['fixture']['status']['elapsed'] ?? 0,
      leagueId: map['league']['id'],
      leagueName: map['league']['name'] ?? '',
      leagueCountry: map['league']['country'] ?? '',
      leagueLogo: map['league']['logo'] ?? '',
      leagueFlag: map['league']['flag'] ?? '',
      leagueSeason: map['league']['season'] ?? 0,
      leagueRound: map['league']['round'] ?? '',
      homeTeamId: map['teams']['home']['id'] ?? 0,
      homeTeamName: map['teams']['home']['name'] ?? '',
      homeTeamLogo: map['teams']['home']['logo'] ?? '',
      homeTeamWinner: map['teams']['home']['winner'] ?? false,
      awayTeamId: map['teams']['away']['id'] ?? 0,
      awayTeamName: map['teams']['away']['name'] ?? '',
      awayTeamLogo: map['teams']['away']['logo'] ?? '',
      awayTeamWinner: map['teams']['away']['winner'] ?? false,
      goalsHome: map['goals']['home'] ?? 0,
      goalsAway: map['goals']['away'] ?? 0,
      scoreHalftimeHome: map['score']['halftime']['home'] ?? 0,
      scoreHalftimeAway: map['score']['halftime']['away'] ?? 0,
      scoreFulltimeHome: map['score']['fulltime']['home'] ?? 0,
      scoreFulltimeAway: map['score']['fulltime']['away'] ?? 0,
      scoreExtratimeHome: map['score']['extratime']['home'] ?? 0,
      scoreExtratimeAway: map['score']['extratime']['away'] ?? 0,
      scorePenaltyHome: map['score']['penalty']['home'] ?? 0,
      scorePenaltyAway: map['score']['penalty']['away'] ?? 0,
    );
  }

  // Factory method to create a StandingModel instance from a StandingEntity instance
  factory FixtureModel.fromEntity(FixtureEntity entity) {
    return FixtureModel(
      id: entity.id,
      referee: entity.referee,
      timezone: entity.timezone,
      date: entity.date,
      timestamp: entity.timestamp,
      venueId: entity.venueId,
      venueName: entity.venueName,
      venueCity: entity.venueCity,
      statusLong: entity.statusLong,
      statusShort: entity.statusShort,
      statusElapsed: entity.statusElapsed,
      leagueId: entity.leagueId,
      leagueName: entity.leagueName,
      leagueCountry: entity.leagueCountry,
      leagueLogo: entity.leagueLogo,
      leagueFlag: entity.leagueFlag,
      leagueSeason: entity.leagueSeason,
      leagueRound: entity.leagueRound,
      homeTeamId: entity.homeTeamId,
      homeTeamName: entity.homeTeamName,
      homeTeamLogo: entity.homeTeamLogo,
      homeTeamWinner: entity.homeTeamWinner,
      awayTeamId: entity.awayTeamId,
      awayTeamName: entity.awayTeamName,
      awayTeamLogo: entity.awayTeamLogo,
      awayTeamWinner: entity.awayTeamWinner,
      goalsHome: entity.goalsHome,
      goalsAway: entity.goalsAway,
      scoreHalftimeHome: entity.scoreHalftimeHome,
      scoreHalftimeAway: entity.scoreHalftimeAway,
      scoreFulltimeHome: entity.scoreFulltimeHome,
      scoreFulltimeAway: entity.scoreFulltimeAway,
      scoreExtratimeHome: entity.scoreExtratimeHome,
      scoreExtratimeAway: entity.scoreExtratimeAway,
      scorePenaltyHome: entity.scorePenaltyHome,
      scorePenaltyAway: entity.scorePenaltyAway,
    );
  }
}
